openapi: "3.0.3"
info:
  title: "funduk API"
  description: "funduk API"
  version: "1.0.0"
servers:
  - url: "http://localhost:8080"
paths:
  /api/tasks:
    get:
      summary: Returns a list of tasks
      responses:
        "200":
          description: "JSON array of tasks"
          content:
            'application/json':
              schema:
                type: "array"
    post:
      description: Creates task
      requestBody:
        content:
          'application/json':
            schema:
              type: "object"
        required: true
      responses:
        "201":
          description: "Task ID"
          content:
            'application/json':
              schema:
                type: "integer"
  /api/tasks/{id}:
    delete:
      description: "Delete task"
      parameters:
        - name: "id"
          in: "path"
          required: true
          schema:
            type: "string"
      responses:
        "200":
          description: "OK"
        "404":
          description: "Not Found"
    get:
      description: "Get task with id"
      parameters:
        - name: "id"
          in: "path"
          required: true
          schema:
            type: "string"
      responses:
        "200":
          description: "OK"
          content:
            'application/json':
              schema:
                type: "object"
  /auth/login:
    post:
      description: "Login"
      requestBody:
        content:
          'application/json':
            schema:
              $ref: "#/components/schemas/AuthRequest"
        required: true
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                type: "string"
        "401":
          description: "Unauthorized"
          content:
            '*/*':
              schema:
                type: "string"
              examples:
                Example#1:
                  value: "Invalid credentials"
  /auth/register:
    post:
      description: ""
      requestBody:
        content:
          'application/json':
            schema:
              $ref: "#/components/schemas/AuthRequest"
        required: true
      responses:
        "409":
          description: "Conflict"
          content:
            'text/plain':
              schema:
                type: "string"
              example: "Oops! That username is already in use. Try a different one."
        "201":
          description: "Created"
          content:
            'text/plain':
              schema:
                type: "string"
              example: "User registered successfully"


  /me:
    get:
      description: ""
      security:
        - jwtAuth: []
      responses:
        "200":
          description: "OK"
          content:
            text/plain:
              schema:
                type: "string"
  /ping:
    get:
      description: ""
      responses:
        "200":
          description: "OK"
          content:
            text/plain:
              schema:
                type: "string"
              examples:
                Example#1:
                  value: "pong"
components:
  securitySchemes:
    jwtAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    AuthRequest:
      type: "object"
      properties:
        username:
          type: "string"
        password:
          type: "string"